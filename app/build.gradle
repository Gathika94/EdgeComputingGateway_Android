apply plugin: 'com.android.application'
apply plugin: 'me.champeau.gradle.antlr4'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "agent.androidtv.wso2.org.agent2"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        merge 'META-INF/DEPENDENCIES'
        // merge 'org/apache/log4j/lf5/config/defaultconfig.properties'
        merge 'META-INF/annotations/org.wso2.siddhi.annotation.Extension'
        merge'org/eclipse/paho/client/mqttv3/internal/nls/'
        merge 'org/eclipse/paho/client/mqttv3/logging/jsr47min.properties'

        merge 'javax/xml/bind/util/Messages.properties'
        merge 'javax/xml/bind/Messages.properties'
        merge 'javax/xml/bind/helpers/Messages.properties'
       // merge 'META-INF/services/javax.xml.bind.JAXBContext'
        /*merge 'org/eclipse/paho/client/mqttv3/internal/nls/messages_pl.properties'
        merge 'org/eclipse/paho/client/mqttv3/internal/nls/messages_es.properties'
        merge 'org/eclipse/paho/client/mqttv3/internal/nls/messages_ja.properties'
        merge 'org/eclipse/paho/client/mqttv3/internal/nls/messages_cs.properties'*/
    }


}

antlr4 {
    extraArgs = ['-package', 'org.wso2.siddhi.query.compiler']
    output = project.file("src/main/java/org/wso2/siddhi/query/compiler")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:leanback-v17:26.0.1'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:appcompat-v7:26.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.0'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.0'




    implementation('org.wso2.siddhi:siddhi-core:4.0.0-M83-SNAPSHOT') {
        transitive = false;
    }
    annotationProcessor('org.wso2.siddhi:siddhi-annotations:4.0.0-M83-SNAPSHOT') {
        transitive = false
    }
    implementation('org.wso2.siddhi:siddhi-annotations:4.0.0-M83-SNAPSHOT') {
        transitive = false
    }
    implementation('org.wso2.siddhi:siddhi-query-api:4.0.0-M83-SNAPSHOT') {
        transitive = false
    }
    implementation('org.wso2.siddhi:siddhi-query-compiler:4.0.0-M83-SNAPSHOT') {
        transitive = false
    }

    implementation('org.wso2.extension.siddhi.map.text:siddhi-map-text:1.0.4') {
        transitive = false
    }

    implementation('org.wso2.extension.siddhi.io.mqtt:siddhi-io-mqtt:1.0.8-SNAPSHOT') {
        transitive = false
    }
    implementation('org.wso2.extension.siddhi.map.xml:siddhi-map-xml:4.0.1'){
        transitive = false
    }
   implementation('org.wso2.extension.siddhi.map.json:siddhi-map-json:4.0.4'){

       transitive = false
      // exclude group:'org.wso2.siddhi'
    }
    implementation('org.wso2.extension.siddhi.store.rdbms:siddhi-store-rdbms:4.0.0-M9-SNAPSHOT'){
        transitive = false
    }
    /* configurations {
         implementation.exclude module:'log4j'

         api.exclude group : 'org.atteo.classindex'
     }*/
    /*implementation 'org.wso2.siddhi:siddhi-query-api:4.0.0-M50'
    implementation 'org.wso2.siddhi:siddhi-query-compiler:4.0.0-M50'*/
    // implementation 'org.wso2.siddhi:siddhi-extension-text-input-mapper:4.0.0-M15'


    //implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'
    implementation 'commons-codec:commons-codec:1.10'
    implementation 'com.github.felHR85:UsbSerial:4.5'
    implementation 'com.netflix.feign:feign-jaxrs:8.16.0'
    implementation ('com.netflix.feign:feign-jackson:8.16.0'){

    }
    //implementation 'javax.ws.rs:jsr311-api:1.1.1'
    /*implementation 'com.netflix.feign:feign-core:8.16.0'
    implementation ('com.netflix.feign:feign-jaxrs:8.16.0'){
        transitive=false
    }
    implementation('com.netflix.feign:feign-jackson:8.16.0'){
        transitive=false;
    }*/




    implementation "com.google.guava:guava:19.0"
   // implementation "com.google.code.gson:gson:2.8.0"
    implementation("org.apache.log4j.wso2:log4j:1.2.17.wso2v1") {
        transitive = false
    }
    implementation "org.osgi:org.osgi.core:6.0.0"
    implementation "org.eclipse.osgi:org.eclipse.osgi.services:3.3.100.v20120522-1822"
    implementation 'com.android.support:multidex:1.0.0'
    implementation 'com.android.support:design:26.0.1'
    annotationProcessor("org.atteo.classindex:classindex:3.4") {}
    implementation "org.wso2.orbit.com.lmax:disruptor:3.3.2.wso2v2"
    implementation "org.antlr:antlr4-runtime:4.5.1"
    implementation "com.h2database:h2:1.4.196"




   /* implementation("org.wso2.carbon.config:org.wso2.carbon.config:2.0.3"){
        transitive = false
    }
    implementation("org.wso2.carbon.secvault:org.wso2.carbon.secvault:5.0.8"){
        transitive=false;
    }
    annotationProcessor("org.wso2.carbon.config:org.wso2.carbon.config:2.0.3") {
        transitive = false
    }
    implementation('org.yaml:snakeyaml:1.18')*/




    implementation ("org.wso2.carbon.datasources:org.wso2.carbon.datasource.core:1.1.2"){
        transitive=false
    }
    annotationProcessor ("org.wso2.carbon.datasources:org.wso2.carbon.datasource.core:1.1.2"){

        transitive = false
    }

    implementation ("com.zaxxer:HikariCP-java7:2.4.13"){
       transitive=false
    }

    implementation ("org.slf4j:slf4j-api:1.7.21"){
       transitive= false;
    }

   implementation ("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.6.4"){

    }

   implementation("javax.xml.stream:stax-api:1.0-2"){

    }


    implementation ('javax.xml.bind:jaxb-api:2.2.11'){

    }











    /*implementation ("com.fasterxml.jackson.core:jackson-core:2.8.10"){
        transitive=false;
    }*/

    /*implementation ("com.fasterxml.jackson.core:jackson-annotations:2.8.10"){
        transitive=false;
    }*/

    /*implementation ("com.fasterxml.jackson.core:jackson-databind:2.8.10"){
        transitive=false;
    }

    implementation ("com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.8.10"){
        transitive=false;
    }*/

   implementation("com.fasterxml.woodstox:woodstox-core:5.0.3")


    //implementation 'com.sun.xml.ws:jaxws-rt:2.2.8'
    //implementation ('com.sun.xml.bind:jaxb-impl:2.2.10')
   /* implementation('javax.xml:jaxb-api:2.0'){
        //transitive=false
    }*/
    //implementation "com.jayway.jsonpath:json-path:2.2.0"



    /* implementation ("org.atteo.classindex:classindex:3.4"){
              transitive =false
      }*/

    /*implementation "org.mvel:mvel2:2.2.1.Final"
    implementation "io.dropwizard.metrics:metrics-core:3.1.0"
    implementation "org.quartz-scheduler.wso2:quartz:2.1.1.wso2v1"
    implementation "org.slf4j:slf4j-simple:1.7.12"
    implementation "com.jayway.jsonpath:json-path:2.2.0"
    implementation "org.wso2.msf4j:msf4j-all:2.1.1"
    implementation "javax.servlet:servlet-api:2.5"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.4.1"
    implementation "com.zaxxer:HikariCP:2.6.3"
    implementation "org.apache.maven:maven-core:3.3.9"
    annotationProcessor "org.apache.maven:maven-core:3.3.9"
    implementation "org.apache.maven:maven-plugin-api:3.0.5"
    implementation "org.apache.maven.plugin-tools:maven-plugin-annotations:3.4"
    implementation "org.freemarker:freemarker-gae:2.3.25-incubating"
    implementation "org.apache.commons:commons-io:1.3.2"
    implementation "org.yaml:snakeyaml:1.18"*/

    /*  implementation ('com.github.Gathika94.siddhi:siddhi-core:v4.0.0-M60'){
          exclude group:'com.github.Gathika94.siddhi'
          exclude group:'org.apache.log4j.wso2'
          exclude group:'org.slf4j'
          exclude group:'org.wso2.orbit.com.lmax'
          exclude group:'com.google.guava'
          exclude group:'org.quartz-scheduler.wso2'
          exclude group:'io.dropwizard.metrics'
          exclude group:'com.google.code.gson'
          exclude group: 'com.jayway.jsonpath'
          exclude group:'org.eclipse.osgi'
          exclude group:'org.osgi'


      }


      annotationProcessor ('com.github.Gathika94.siddhi:siddhi-annotations:v4.0.0-M60'){
          transitive == false;
      }

      implementation ('com.github.Gathika94.siddhi:siddhi-annotations:v4.0.0-M60'){
          //transitive == false;
          exclude group:'org.atteo.classindex'
      }

      implementation ('com.github.Gathika94.siddhi:siddhi-query-api:v4.0.0-M60'){
          //transitive == false;
          exclude group:'org.apache.log4j.wso2'
      }



      implementation ('com.github.Gathika94.siddhi:siddhi-query-compiler:v4.0.0-M60'){
          //transitive == false;
          exclude group:'com.github.Gathika94.siddhi'
          exclude group:'org.apache.log4j.wso2'
          exclude group:'org.mvel'
          exclude group:'org.antlr'
      }

      implementation ('org.wso2.siddhi:siddhi-extension-text-input-mapper:4.0.0-M15'){
          transitive = false
      }*/
    //implementation 'com.android.support:multidex:1.0.0'

}
